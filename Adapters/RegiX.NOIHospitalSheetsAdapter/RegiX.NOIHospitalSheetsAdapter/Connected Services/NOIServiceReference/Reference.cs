//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NOIServiceReference
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="NOIServiceReference.ePCReportEGNSoap")]
    public interface ePCReportEGNSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/GetDataForEGN", ReplyAction="*")]
        System.Threading.Tasks.Task<NOIServiceReference.GetDataForEGNResponse> GetDataForEGNAsync(NOIServiceReference.GetDataForEGNRequest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetDataForEGNRequest
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="GetDataForEGN", Namespace="http://tempuri.org/", Order=0)]
        public NOIServiceReference.GetDataForEGNRequestBody Body;
        
        public GetDataForEGNRequest()
        {
        }
        
        public GetDataForEGNRequest(NOIServiceReference.GetDataForEGNRequestBody Body)
        {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class GetDataForEGNRequestBody
    {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string egn;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=1)]
        public string flagegn;
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=2)]
        public string username;
        
        public GetDataForEGNRequestBody()
        {
        }
        
        public GetDataForEGNRequestBody(string egn, string flagegn, string username)
        {
            this.egn = egn;
            this.flagegn = flagegn;
            this.username = username;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(IsWrapped=false)]
    public partial class GetDataForEGNResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Name="GetDataForEGNResponse", Namespace="http://tempuri.org/", Order=0)]
        public NOIServiceReference.GetDataForEGNResponseBody Body;
        
        public GetDataForEGNResponse()
        {
        }
        
        public GetDataForEGNResponse(NOIServiceReference.GetDataForEGNResponseBody Body)
        {
            this.Body = Body;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.Runtime.Serialization.DataContractAttribute(Namespace="http://tempuri.org/")]
    public partial class GetDataForEGNResponseBody
    {
        
        [System.Runtime.Serialization.DataMemberAttribute(EmitDefaultValue=false, Order=0)]
        public string GetDataForEGNResult;
        
        public GetDataForEGNResponseBody()
        {
        }
        
        public GetDataForEGNResponseBody(string GetDataForEGNResult)
        {
            this.GetDataForEGNResult = GetDataForEGNResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface ePCReportEGNSoapChannel : NOIServiceReference.ePCReportEGNSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class ePCReportEGNSoapClient : System.ServiceModel.ClientBase<NOIServiceReference.ePCReportEGNSoap>, NOIServiceReference.ePCReportEGNSoap
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public ePCReportEGNSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(ePCReportEGNSoapClient.GetBindingForEndpoint(endpointConfiguration), ePCReportEGNSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ePCReportEGNSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(ePCReportEGNSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ePCReportEGNSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(ePCReportEGNSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public ePCReportEGNSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<NOIServiceReference.GetDataForEGNResponse> NOIServiceReference.ePCReportEGNSoap.GetDataForEGNAsync(NOIServiceReference.GetDataForEGNRequest request)
        {
            return base.Channel.GetDataForEGNAsync(request);
        }
        
        public System.Threading.Tasks.Task<NOIServiceReference.GetDataForEGNResponse> GetDataForEGNAsync(string egn, string flagegn, string username)
        {
            NOIServiceReference.GetDataForEGNRequest inValue = new NOIServiceReference.GetDataForEGNRequest();
            inValue.Body = new NOIServiceReference.GetDataForEGNRequestBody();
            inValue.Body.egn = egn;
            inValue.Body.flagegn = flagegn;
            inValue.Body.username = username;
            return ((NOIServiceReference.ePCReportEGNSoap)(this)).GetDataForEGNAsync(inValue);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.ePCReportEGNSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.ePCReportEGNSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpsTransportBindingElement httpsBindingElement = new System.ServiceModel.Channels.HttpsTransportBindingElement();
                httpsBindingElement.AllowCookies = true;
                httpsBindingElement.MaxBufferSize = int.MaxValue;
                httpsBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpsBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.ePCReportEGNSoap))
            {
                return new System.ServiceModel.EndpointAddress("https://nssiregix.nssi.bg/ePCReportEGNDAEU/ePCReportEGN.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.ePCReportEGNSoap12))
            {
                return new System.ServiceModel.EndpointAddress("https://nssiregix.nssi.bg/ePCReportEGNDAEU/ePCReportEGN.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            ePCReportEGNSoap,
            
            ePCReportEGNSoap12,
        }
    }
}
